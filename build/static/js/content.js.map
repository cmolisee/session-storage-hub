{"version":3,"file":"static/js/content.js","mappings":"yBAAO,IAAKA,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,yBAANA,CAAM,MAKNC,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,mBAANA,EAAAA,EAAM,eAANA,EAAAA,EAAM,iBAANA,CAAM,MCHLC,EAAgB,SAACC,GAC7B,OAAOA,EAH+B,OAIvC,ECOMC,EAAiB,SACtBC,EACAC,EACAC,EACAC,GAEA,OACCA,EAAOC,KAAOC,OAAOC,QAAQF,IAC7BF,EAAQK,OAASP,GACjBE,EAAQM,SAAWP,CAErB,EAEMQ,EAAyB,SAC9BP,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOgB,QAASV,EAASC,GAAS,CACtE,IAAMU,EAAOC,OAAOC,OAAO,CAAC,EAAGC,gBAM/B,OAJAN,EAAS,CACRO,MAAQJ,EAA4C,KAArC,mCACfA,KAAMA,KAEA,CACR,CACA,OAAO,CACR,EAEMK,EAAwB,SAC7BhB,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOuB,OAAQjB,EAASC,GAAS,CACrE,IAAK,IAADiB,EAAAC,EACHP,OAAOQ,QAAkC,QAA3BF,EAAgB,QAAhBC,EAACnB,EAAQA,eAAO,IAAAmB,OAAA,EAAfA,EAAiBE,iBAAS,IAAAH,EAAAA,EAAI,CAAC,GAAGI,SAAQ,SAACC,GACzDT,eAAeU,QAAQD,EAAE,GAAIA,EAAE,GAChC,IAGAf,EAAS,CAAEO,MAAO,KAAMJ,KADXC,OAAOC,OAAO,CAAC,EAAGC,iBAEhC,CAAE,MAAAW,GACDjB,EAAS,CACRO,MAAO,sCACPJ,KAAM,MAER,CACA,OAAO,CACR,CACA,OAAO,CACR,EAGMe,EAAuB,SAC5B1B,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOiC,MAAO3B,EAASC,GAAS,CACpE,IAECE,OAAOyB,QAAQC,MAAMC,IAAI,eAAe,SAACnB,GAGxC,GACEX,EAAQA,SACRA,EAAQA,QAAQ+B,YACjB/B,EAAQA,QAAQgC,YACfrB,GACAA,EAAKoB,aACNpC,EAAcK,EAAQA,QAAQ+B,UAAYpB,EAAKoB,WAC9C,GA8BD,OADAvB,EAAS,CAAEO,MAAO,KAAMJ,KAAMA,KACvB,EA5BPsB,QAAQC,KAAK,sCAAuC,CACnDlC,QAAAA,EACAW,KAAAA,EACAwB,cACCxC,EACCK,EAAQA,QAAQ+B,UACdpB,EAAKoB,WACJ,IAGNK,MACC,6EAECC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACG,GACN,IAAMC,EAAwB,CAC7BC,WAECC,WADAH,EAAsB,SAAEI,MAAM,GAE/Bb,WAAW,IAAIc,MAAOC,UACtBC,WAAYP,EAAsB,UAGnChC,EAAS,CAAEO,MAAO,KAAMJ,KAAM8B,GAC/B,GAMH,GACD,CAAE,MAAAO,GACDxC,EAAS,CACRO,MAAO,qCACPJ,KAAM,CAAC,GAET,CACA,OAAO,CACR,CACA,OAAO,CACR,EAICR,OAAOC,QAAQ6C,UAAUC,YAAY3C,GACrCJ,OAAOC,QAAQ6C,UAAUC,YAAYlC,GACrCb,OAAOC,QAAQ6C,UAAUC,YAAYxB,E","sources":["types/types.ts","utils/helperUtils.ts","chromeServices/content.ts"],"sourcesContent":["export enum Sender {\n\tWebpage,\n\tExtension,\n}\n\nexport enum Action {\n\tRequest,\n\tUpdate,\n\tPost,\n\tCheck,\n}\n\nexport interface IChromeMessage {\n\tfrom: Sender;\n\taction: Action;\n\tmessage: any;\n}\n\nexport interface IMessageResponse {\n\terror: string | null;\n\tdata: any;\n}\n\nexport type TVersionData = {\n\tisUpToDate?: boolean;\n\ttimestamp?: number;\n\treleaseUrl?: string;\n};\n","export const MS_TO_HR_FACTOR: number = 2777777;\n\nexport const convertMsToHr = (ms: number) => {\n\treturn ms / MS_TO_HR_FACTOR;\n};\n","import {\n\tAction,\n\tIChromeMessage,\n\tIMessageResponse,\n\tSender,\n\tTVersionData,\n} from '../types/types';\nimport { convertMsToHr } from '../utils/helperUtils';\n\ntype TResponse = (response?: IMessageResponse) => void;\n\nconst validateSender = (\n\texpectedSender: Sender,\n\texpectedAction: Action,\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender\n) => {\n\treturn (\n\t\tsender.id === chrome.runtime.id &&\n\t\tmessage.from === expectedSender &&\n\t\tmessage.action === expectedAction\n\t);\n};\n\nconst requestMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Request, message, sender)) {\n\t\tconst data = Object.assign({}, sessionStorage);\n\n\t\tresponse({\n\t\t\terror: !data ? 'Error retrieving session storage' : null,\n\t\t\tdata: data,\n\t\t});\n\t\treturn true; // we will eventually return a response\n\t}\n\treturn false; // do not expect a response\n};\n\nconst updateMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Update, message, sender)) {\n\t\ttry {\n\t\t\tObject.entries(message.message?.clipboard ?? {}).forEach((e) => {\n\t\t\t\tsessionStorage.setItem(e[0], e[1] as string);\n\t\t\t});\n\n\t\t\tconst data = Object.assign({}, sessionStorage);\n\t\t\tresponse({ error: null, data: data });\n\t\t} catch {\n\t\t\tresponse({\n\t\t\t\terror: 'Error updating session storage data',\n\t\t\t\tdata: null,\n\t\t\t});\n\t\t}\n\t\treturn true; // we will eventually return a response\n\t}\n\treturn false; // do not expect a response\n};\n\n// messageListeners must return a boolean so they cannot be async\nconst checkReleaseListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Check, message, sender)) {\n\t\ttry {\n\t\t\t// request release information from local storage\n\t\t\tchrome.storage.local.get('versionData', (data: TVersionData) => {\n\t\t\t\t// if it does not exist, no message passed in message request, or >5hrs since last check\n\t\t\t\t// get data from api request\n\t\t\t\tif (\n\t\t\t\t\t!message.message ||\n\t\t\t\t\t!message.message.timestamp ||\n\t\t\t\t\tmessage.message.forceCheck ||\n\t\t\t\t\t!data ||\n\t\t\t\t\t!data.timestamp ||\n\t\t\t\t\tconvertMsToHr(message.message.timestamp - data.timestamp) >\n\t\t\t\t\t\t5\n\t\t\t\t) {\n\t\t\t\t\tconsole.info('Requesting check for latest release', {\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\ttimestampDiff:\n\t\t\t\t\t\t\tconvertMsToHr(\n\t\t\t\t\t\t\t\tmessage.message.timestamp -\n\t\t\t\t\t\t\t\t\t(data.timestamp as number)\n\t\t\t\t\t\t\t) > 5,\n\t\t\t\t\t});\n\n\t\t\t\t\tfetch(\n\t\t\t\t\t\t'https://api.github.com/repos/cmolisee/session-storage-hub/releases/latest'\n\t\t\t\t\t)\n\t\t\t\t\t\t.then((res) => res.json())\n\t\t\t\t\t\t.then((releaseData) => {\n\t\t\t\t\t\t\tconst resData: TVersionData = {\n\t\t\t\t\t\t\t\tisUpToDate:\n\t\t\t\t\t\t\t\t\treleaseData['tag_name'].slice[1] !==\n\t\t\t\t\t\t\t\t\tprocess.env.VERSION,\n\t\t\t\t\t\t\t\ttimestamp: new Date().getTime(),\n\t\t\t\t\t\t\t\treleaseUrl: releaseData['html_url'],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tresponse({ error: null, data: resData });\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise data exists, is up to date\n\t\t\t\t\tresponse({ error: null, data: data });\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch {\n\t\t\tresponse({\n\t\t\t\terror: 'Error checking for updated release',\n\t\t\t\tdata: {},\n\t\t\t});\n\t\t}\n\t\treturn true; // we will eventually return a response\n\t}\n\treturn false; // do not expect a response\n};\n\nconst main = () => {\n\t// Fired when a message is sent from either an extension process or a content script.\n\tchrome.runtime.onMessage.addListener(requestMessageListener);\n\tchrome.runtime.onMessage.addListener(updateMessageListener);\n\tchrome.runtime.onMessage.addListener(checkReleaseListener);\n};\n\nmain();\n"],"names":["Sender","Action","convertMsToHr","ms","validateSender","expectedSender","expectedAction","message","sender","id","chrome","runtime","from","action","requestMessageListener","response","Extension","Request","data","Object","assign","sessionStorage","error","updateMessageListener","Update","_message$message$clip","_message$message","entries","clipboard","forEach","e","setItem","_unused","checkReleaseListener","Check","storage","local","get","timestamp","forceCheck","console","info","timestampDiff","fetch","then","res","json","releaseData","resData","isUpToDate","process","slice","Date","getTime","releaseUrl","_unused2","onMessage","addListener"],"sourceRoot":""}