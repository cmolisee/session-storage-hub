{"version":3,"file":"static/js/content.js","mappings":"yBAAO,IAAKA,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,yBAANA,CAAM,MAKNC,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,mBAANA,EAAAA,EAAM,eAANA,CAAM,MCDZC,EAAiB,SACnBC,EACAC,EACAC,EACAC,GAEA,OAAOA,EAAOC,KAAOC,OAAOC,QAAQF,IAAMF,EAAQK,OAASP,GAAkBE,EAAQM,SAAWP,CACpG,EAEMQ,EAAyB,SAC3BP,EACAC,EACAO,GAEA,GAAIX,EAAeF,EAAOc,UAAWb,EAAOc,QAASV,EAASC,GAAS,CACnE,IAAMU,EAAOC,OAAOC,OAAO,CAAC,EAAGC,gBAM/BN,EALY,CACRO,MAAQJ,EAA4C,KAArC,mCACfA,KAAMA,GAId,CACJ,EAEMK,EAAwB,SAC1BhB,EACAC,EACAO,GAEA,GAAIX,EAAeF,EAAOc,UAAWb,EAAOqB,OAAQjB,EAASC,GACzD,IAAK,IAADiB,EAAAC,EACAP,OAAOQ,QAAkC,QAA3BF,EAAgB,QAAhBC,EAACnB,EAAQA,eAAO,IAAAmB,OAAA,EAAfA,EAAiBE,iBAAS,IAAAH,EAAAA,EAAI,CAAC,GAAGI,SAAQ,SAACC,GACtDT,eAAeU,QAAQD,EAAE,GAAIA,EAAE,GACnC,IAGAf,EAAS,CAAEO,MAAO,KAAMJ,KADXC,OAAOC,OAAO,CAAC,EAAGC,iBAEnC,CAAE,MAAAW,GACEjB,EAAU,CAAEO,MAAO,sCAAuCJ,KAAM,MACpE,CAER,EAMIR,OAAOC,QAAQsB,UAAUC,YAAYpB,GACrCJ,OAAOC,QAAQsB,UAAUC,YAAYX,E","sources":["types/types.ts","chromeServices/content.ts"],"sourcesContent":["export enum Sender {\n    Webpage,\n    Extension\n};\n\nexport enum Action {\n    Request,\n    Update,\n    Post,\n}\n\nexport interface IChromeMessage {\n    from: Sender,\n    action: Action,\n    message: any,\n}\n\nexport interface IMessageResponse {\n    error: string | null,\n    data: any,\n}","import { Action, IChromeMessage, IMessageResponse, Sender } from \"../types/types\";\n\ntype TResponse = (response?: IMessageResponse) => void\n\nconst validateSender = (\n    expectedSender: Sender,\n    expectedAction: Action,\n    message: IChromeMessage,\n    sender: chrome.runtime.MessageSender\n) => {\n    return sender.id === chrome.runtime.id && message.from === expectedSender && message.action === expectedAction;\n}\n\nconst requestMessageListener = (\n    message: IChromeMessage,\n    sender: chrome.runtime.MessageSender,\n    response: TResponse\n) => {\n    if (validateSender(Sender.Extension, Action.Request, message, sender)) {\n        const data = Object.assign({}, sessionStorage);\n        const res = {\n            error: !data ? 'Error retrieving session storage' : null,\n            data: data\n        }\n\n        response(res);\n    }\n}\n\nconst updateMessageListener = (\n    message: IChromeMessage,\n    sender: chrome.runtime.MessageSender,\n    response: TResponse\n) => {\n    if (validateSender(Sender.Extension, Action.Update, message, sender)) {\n        try {\n            Object.entries(message.message?.clipboard ?? {}).forEach((e) => {\n                sessionStorage.setItem(e[0], e[1] as string);\n            });\n\n            const data = Object.assign({}, sessionStorage);\n            response({ error: null, data: data });\n        } catch {\n            response ({ error: 'Error updating session storage data', data: null })\n        }\n    }\n}\n\nconst main = () => {\n    // /**\n    //  * Fired when a message is sent from either an extension process or a content script.\n    //  */\n    chrome.runtime.onMessage.addListener(requestMessageListener);\n    chrome.runtime.onMessage.addListener(updateMessageListener);\n}\n\nmain();\n"],"names":["Sender","Action","validateSender","expectedSender","expectedAction","message","sender","id","chrome","runtime","from","action","requestMessageListener","response","Extension","Request","data","Object","assign","sessionStorage","error","updateMessageListener","Update","_message$message$clip","_message$message","entries","clipboard","forEach","e","setItem","_unused","onMessage","addListener"],"sourceRoot":""}