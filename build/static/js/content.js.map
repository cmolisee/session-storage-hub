{"version":3,"file":"static/js/content.js","mappings":"yBAAO,IAAKA,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,yBAANA,CAAM,MAKNC,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,mBAANA,EAAAA,EAAM,eAANA,CAAM,MCIZC,EAAiB,SACtBC,EACAC,EACAC,EACAC,GAEA,OACCA,EAAOC,KAAOC,OAAOC,QAAQF,IAC7BF,EAAQK,OAASP,GACjBE,EAAQM,SAAWP,CAErB,EAEMQ,EAAyB,SAC9BP,EACAC,EACAO,GAEA,GAAIX,EAAeF,EAAOc,UAAWb,EAAOc,QAASV,EAASC,GAAS,CACtE,IAAMU,EAAOC,OAAOC,OAAO,CAAC,EAAGC,gBAM/BN,EALY,CACXO,MAAQJ,EAA4C,KAArC,mCACfA,KAAMA,GAIR,CACD,EAEMK,EAAwB,SAC7BhB,EACAC,EACAO,GAEA,GAAIX,EAAeF,EAAOc,UAAWb,EAAOqB,OAAQjB,EAASC,GAC5D,IAAK,IAADiB,EAAAC,EACHP,OAAOQ,QAAkC,QAA3BF,EAAgB,QAAhBC,EAACnB,EAAQA,eAAO,IAAAmB,OAAA,EAAfA,EAAiBE,iBAAS,IAAAH,EAAAA,EAAI,CAAC,GAAGI,SAAQ,SAACC,GACzDT,eAAeU,QAAQD,EAAE,GAAIA,EAAE,GAChC,IAGAf,EAAS,CAAEO,MAAO,KAAMJ,KADXC,OAAOC,OAAO,CAAC,EAAGC,iBAEhC,CAAE,MAAAW,GACDjB,EAAS,CACRO,MAAO,sCACPJ,KAAM,MAER,CAEF,EAMCR,OAAOC,QAAQsB,UAAUC,YAAYpB,GACrCJ,OAAOC,QAAQsB,UAAUC,YAAYX,E","sources":["types/types.ts","chromeServices/content.ts"],"sourcesContent":["export enum Sender {\n\tWebpage,\n\tExtension,\n}\n\nexport enum Action {\n\tRequest,\n\tUpdate,\n\tPost,\n}\n\nexport interface IChromeMessage {\n\tfrom: Sender;\n\taction: Action;\n\tmessage: any;\n}\n\nexport interface IMessageResponse {\n\terror: string | null;\n\tdata: any;\n}\n","import {\n\tAction,\n\tIChromeMessage,\n\tIMessageResponse,\n\tSender,\n} from '../types/types';\n\ntype TResponse = (response?: IMessageResponse) => void;\n\nconst validateSender = (\n\texpectedSender: Sender,\n\texpectedAction: Action,\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender\n) => {\n\treturn (\n\t\tsender.id === chrome.runtime.id &&\n\t\tmessage.from === expectedSender &&\n\t\tmessage.action === expectedAction\n\t);\n};\n\nconst requestMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Request, message, sender)) {\n\t\tconst data = Object.assign({}, sessionStorage);\n\t\tconst res = {\n\t\t\terror: !data ? 'Error retrieving session storage' : null,\n\t\t\tdata: data,\n\t\t};\n\n\t\tresponse(res);\n\t}\n};\n\nconst updateMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Update, message, sender)) {\n\t\ttry {\n\t\t\tObject.entries(message.message?.clipboard ?? {}).forEach((e) => {\n\t\t\t\tsessionStorage.setItem(e[0], e[1] as string);\n\t\t\t});\n\n\t\t\tconst data = Object.assign({}, sessionStorage);\n\t\t\tresponse({ error: null, data: data });\n\t\t} catch {\n\t\t\tresponse({\n\t\t\t\terror: 'Error updating session storage data',\n\t\t\t\tdata: null,\n\t\t\t});\n\t\t}\n\t}\n};\n\nconst main = () => {\n\t// /**\n\t//  * Fired when a message is sent from either an extension process or a content script.\n\t//  */\n\tchrome.runtime.onMessage.addListener(requestMessageListener);\n\tchrome.runtime.onMessage.addListener(updateMessageListener);\n};\n\nmain();\n"],"names":["Sender","Action","validateSender","expectedSender","expectedAction","message","sender","id","chrome","runtime","from","action","requestMessageListener","response","Extension","Request","data","Object","assign","sessionStorage","error","updateMessageListener","Update","_message$message$clip","_message$message","entries","clipboard","forEach","e","setItem","_unused","onMessage","addListener"],"sourceRoot":""}