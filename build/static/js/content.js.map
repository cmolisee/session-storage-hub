{"version":3,"file":"static/js/content.js","mappings":"yBAAO,IAAKA,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,yBAANA,CAAM,MAKNC,EAAM,SAANA,GAAM,OAANA,EAAAA,EAAM,qBAANA,EAAAA,EAAM,mBAANA,EAAAA,EAAM,eAANA,EAAAA,EAAM,iBAANA,CAAM,MCHLC,EAAgB,SAACC,GAC1B,OAAOA,EAH4B,OAIvC,ECOMC,EAAiB,SACtBC,EACAC,EACAC,EACAC,GAEA,OACCA,EAAOC,KAAOC,OAAOC,QAAQF,IAC7BF,EAAQK,OAASP,GACjBE,EAAQM,SAAWP,CAErB,EAEMQ,EAAyB,SAC9BP,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOgB,QAASV,EAASC,GAAS,CACtE,IAAMU,EAAOC,OAAOC,OAAO,CAAC,EAAGC,gBAMzB,OAJNN,EAAS,CACRO,MAAQJ,EAA4C,KAArC,mCACfA,KAAMA,KAEM,CACd,CACG,OAAO,CACX,EAEMK,EAAwB,SAC7BhB,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOuB,OAAQjB,EAASC,GAAS,CACrE,IAAK,IAADiB,EAAAC,EACHP,OAAOQ,QAAkC,QAA3BF,EAAgB,QAAhBC,EAACnB,EAAQA,eAAO,IAAAmB,OAAA,EAAfA,EAAiBE,iBAAS,IAAAH,EAAAA,EAAI,CAAC,GAAGI,SAAQ,SAACC,GACzDT,eAAeU,QAAQD,EAAE,GAAIA,EAAE,GAChC,IAGAf,EAAS,CAAEO,MAAO,KAAMJ,KADXC,OAAOC,OAAO,CAAC,EAAGC,iBAEhC,CAAE,MAAAW,GACDjB,EAAS,CACRO,MAAO,sCACPJ,KAAM,MAER,CACM,OAAO,CACd,CACG,OAAO,CACX,EAGMe,EAAuB,SAC5B1B,EACAC,EACAO,GAEA,GAAIX,EAAeJ,EAAOgB,UAAWf,EAAOiC,MAAO3B,EAASC,GAAS,CACpE,IAEUE,OAAOyB,QAAQC,MAAMC,IAAI,eAAe,SAACnB,GAGrC,GACKX,EAAQA,SACRA,EAAQA,QAAQ+B,YACjB/B,EAAQA,QAAQgC,YACfrB,GACAA,EAAKoB,aACNpC,EAAcK,EAAQA,QAAQ+B,UAAYpB,EAAKoB,WAAa,GAsB5D,OADAvB,EAAS,CAAEO,MAAO,KAAMJ,KAAMA,KACvB,EApBPsB,QAAQC,KAAK,sCAAuC,CAChDlC,QAAAA,EACAW,KAAAA,EACAwB,cAAexC,EAAcK,EAAQA,QAAQ+B,UAAapB,EAAKoB,WAAwB,IAG3FK,MAAM,6EACDC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACG,GACH,IAAMC,EAAwB,CAC1BC,WAAiDC,WAArCH,EAAsB,SAAEI,MAAM,GAC1Cb,WAAW,IAAIc,MAAOC,UACtBC,WAAYP,EAAsB,UAGtChC,EAAS,CAAEO,MAAO,KAAMJ,KAAM8B,GAClC,GAMZ,GACV,CAAE,MAAAO,GACDxC,EAAS,CACRO,MAAO,qCACPJ,KAAM,CAAC,GAET,CACM,OAAO,CACd,CACG,OAAO,CACX,EAICR,OAAOC,QAAQ6C,UAAUC,YAAY3C,GACrCJ,OAAOC,QAAQ6C,UAAUC,YAAYlC,GAClCb,OAAOC,QAAQ6C,UAAUC,YAAYxB,E","sources":["types/types.ts","utils/helperUtils.ts","chromeServices/content.ts"],"sourcesContent":["export enum Sender {\n\tWebpage,\n\tExtension,\n}\n\nexport enum Action {\n\tRequest,\n\tUpdate,\n\tPost,\n    Check,\n}\n\nexport interface IChromeMessage {\n\tfrom: Sender;\n\taction: Action;\n\tmessage: any;\n}\n\nexport interface IMessageResponse {\n\terror: string | null;\n\tdata: any;\n}\n\nexport type TVersionData = {\n    isUpToDate?: boolean;\n    timestamp?: number;\n    releaseUrl?: string;\n}","export const MS_TO_HR_FACTOR: number = 2777777;\n\nexport const convertMsToHr = (ms: number) => {\n    return ms / MS_TO_HR_FACTOR\n};","import {\n\tAction,\n\tIChromeMessage,\n\tIMessageResponse,\n\tSender,\n    TVersionData,\n} from '../types/types';\nimport { convertMsToHr } from '../utils/helperUtils';\n\ntype TResponse = (response?: IMessageResponse) => void;\n\nconst validateSender = (\n\texpectedSender: Sender,\n\texpectedAction: Action,\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender\n) => {\n\treturn (\n\t\tsender.id === chrome.runtime.id &&\n\t\tmessage.from === expectedSender &&\n\t\tmessage.action === expectedAction\n\t);\n};\n\nconst requestMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Request, message, sender)) {\n\t\tconst data = Object.assign({}, sessionStorage);\n\n\t\tresponse({\n\t\t\terror: !data ? 'Error retrieving session storage' : null,\n\t\t\tdata: data,\n\t\t});\n        return true; // we will eventually return a response\n\t}\n    return false; // do not expect a response\n};\n\nconst updateMessageListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Update, message, sender)) {\n\t\ttry {\n\t\t\tObject.entries(message.message?.clipboard ?? {}).forEach((e) => {\n\t\t\t\tsessionStorage.setItem(e[0], e[1] as string);\n\t\t\t});\n\n\t\t\tconst data = Object.assign({}, sessionStorage);\n\t\t\tresponse({ error: null, data: data });\n\t\t} catch {\n\t\t\tresponse({\n\t\t\t\terror: 'Error updating session storage data',\n\t\t\t\tdata: null,\n\t\t\t});\n\t\t}\n        return true; // we will eventually return a response\n\t}\n    return false; // do not expect a response\n};\n\n// messageListeners must return a boolean so they cannot be async\nconst checkReleaseListener = (\n\tmessage: IChromeMessage,\n\tsender: chrome.runtime.MessageSender,\n\tresponse: TResponse\n) => {\n\tif (validateSender(Sender.Extension, Action.Check, message, sender)) {\n\t\ttry {\n            // request release information from local storage\n            chrome.storage.local.get('versionData', (data: TVersionData) => {\n                // if it does not exist, no message passed in message request, or >5hrs since last check\n                // get data from api request\n                if (\n                    !message.message ||\n                    !message.message.timestamp ||\n                    message.message.forceCheck ||\n                    !data || \n                    !data.timestamp || \n                    convertMsToHr(message.message.timestamp - data.timestamp) > 5\n                ) {\n                    console.info('Requesting check for latest release', {\n                        message,\n                        data,\n                        timestampDiff: convertMsToHr(message.message.timestamp - (data.timestamp as number)) > 5\n                    });\n                    \n                    fetch('https://api.github.com/repos/cmolisee/session-storage-hub/releases/latest')\n                        .then((res) => res.json())\n                        .then((releaseData) => {\n                            const resData: TVersionData = {\n                                isUpToDate: releaseData['tag_name'].slice[1] !== process.env.VERSION,\n                                timestamp: new Date().getTime(),\n                                releaseUrl: releaseData['html_url']\n                            };\n            \n                            response({ error: null, data: resData });\n                        });\n                } else {\n                    // otherwise data exists, is up to date\n                    response({ error: null, data: data });\n                    return true;\n                }\n            });\n\t\t} catch {\n\t\t\tresponse({\n\t\t\t\terror: 'Error checking for updated release',\n\t\t\t\tdata: {},\n\t\t\t});\n\t\t}\n        return true; // we will eventually return a response\n\t}\n    return false; // do not expect a response\n};\n\nconst main = () => {\n    // Fired when a message is sent from either an extension process or a content script.\n\tchrome.runtime.onMessage.addListener(requestMessageListener);\n\tchrome.runtime.onMessage.addListener(updateMessageListener);\n    chrome.runtime.onMessage.addListener(checkReleaseListener);\n};\n\nmain();\n"],"names":["Sender","Action","convertMsToHr","ms","validateSender","expectedSender","expectedAction","message","sender","id","chrome","runtime","from","action","requestMessageListener","response","Extension","Request","data","Object","assign","sessionStorage","error","updateMessageListener","Update","_message$message$clip","_message$message","entries","clipboard","forEach","e","setItem","_unused","checkReleaseListener","Check","storage","local","get","timestamp","forceCheck","console","info","timestampDiff","fetch","then","res","json","releaseData","resData","isUpToDate","process","slice","Date","getTime","releaseUrl","_unused2","onMessage","addListener"],"sourceRoot":""}